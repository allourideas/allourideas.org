= content_for :meta do
  <META NAME="ROBOTS" CONTENT="NOINDEX, NOFOLLOW">
  %meta{:property => 'og:title', :content => "#{h @question.name}"}
  -if @earl && !@earl.logo_file_name.nil?
    %meta{:property => 'og:image', :content => "#{request.protocol}#{request.host_with_port}" + image_path(@earl.logo.url)}
  
-@item_data, @item_ids = [], []
= render :partial => 'shared/header_vote', :locals => {:question => @question}

- bg_color = ab_test("bg_color_aa_#{@earl.name}", ['#F2F2F2', '#F2F2F1'], :conversion => 'voted')
.tab-content.question-vote.row-fluid{:style => "background-color: #{bg_color}"}
  #cookies-failed{:style => "display: none;"}
    %div
      %h2 Cookies Blocked
      %p
        = link_to("Cookies are required", 'http://blog.allourideas.org/post/54515392435/cookies')
        for voting, and it looks like cookies may be disabled in your browser.
        In order to vote, you must allow cookies from allourideas.org. For more information, please read
        this blog post about our
        = link_to('cookie policy.', 'http://blog.allourideas.org/post/54515392435/cookies')
  -if !session[:has_voted] && session[:welcome_msg]
    .row-fluid
      .span10.offset1.welcome-message
        .alert
          %a.close{:type => 'button', :"data-dismiss" => 'alert'} &times;
          %p= h(session[:welcome_msg])
      -session[:welcome_msg] = nil
  .row-fluid
    .span10.offset1
      %h2.vote-question= @question.attributes['name']
  %ul.votebox.answers.row-fluid.unstyled.intro-popover{"data-title" => "Users can vote by clicking one of these options", "data-trigger" => "manual", "data-placement" => "bottom"}
    %li.span5.offset1.leftside
      %div
        = render(:partial => 'questions/idea', :locals => {:data => @left_choice_text, :side => "leftside", :choice_id => @left_choice_id})
      -if @earl.flag_enabled?
        %p.flag= link_to(t('vote.flag_as_inappropriate'), "#flag_inappropriate", :id => 'left_flag', :class=> 'flag_link', :"data-toggle" => 'modal')
    %li.span5.rightside
      %div
        = render(:partial => 'questions/idea', :locals => {:data => @right_choice_text, :side => "rightside", :choice_id => @right_choice_id})
      -if @earl.flag_enabled?
        %p.flag= link_to(t('vote.flag_as_inappropriate'), "#flag_inappropriate", :id => 'right_flag',:class => 'flag_link', :"data-toggle" => 'modal')

  .row-fluid
    %p.cant-decide
      = link_to(t('vote.cant_decide'), "#cant_decide_options", :id => "cant_decide_btn", :"data-toggle" => 'modal', :class => "btn span4 offset4")
    %p.vote_stats= render :partial => 'vote_idea_count', :locals => {:question => @question}

  .row.add-idea-row
    .span10.offset1.add_idea
      = render :partial => 'items/form'
      .tellmearea

#cant_decide_options.hide.modal.fade
  .modal-header
    %button.close{:"data-dismiss" => 'modal'} x
    %h2= t('vote.cant_decide_title')
  .modal-body
    .row-fluid
      .span12
        -cd_options= ['like_both', 'both_same', 'dont_know_both', 'dislike_both', 'dont_know_left', 'dont_know_right', 'other']
        .cd_options
          - cd_options.each_slice(2) do |choices|
            .row-fluid
              - choices.each do |choice|
                .span6
                  %p
                    %button.btn.btn-primary.btn-block{:class => choice, :'data-questionid' => @question.id, :"data-reason" => choice, :"data-dismiss" => 'modal'}
                      =t('vote.cd_'+choice)
                      - if choice == 'dont_know_left' 
                        .leftside
                          %em= h(@left_choice_text)
                      - elsif choice == 'dont_know_right'
                        .rightside
                          %em= h(@right_choice_text)

-if @earl.flag_enabled?
  #flag_inappropriate.hide.modal.fade
    .modal-body
      %form.form-horizontal
        .control-group
          %label.control-label= t('vote.please_explain_flag')
          .controls
            =text_area_tag 'inappropriate_reason', "", :class => 'input-xlarge', :rows => 3
    .modal-footer
      %a.btn{:"data-dismiss" => 'modal'}
        =t('user.close')
      %button.btn.btn-primary.flag_submit_button{:"data-question_id" => @question.id}
        =t('vote.submit')

=hidden_field_tag 'prompt_id', @question.attributes['picked_prompt_id']
=hidden_field_tag 'appearance_lookup', @question.attributes['appearance_id']

=hidden_field_tag 'left_side_text', "blank_history"
=hidden_field_tag 'right_side_text', "blank_history"

-if params[:just_created]
  = render :partial => 'adwords_conversion'

-content_for :head do
  = javascript_include_tag 'jquery.corner', 'jquery.blockUI.js'


-content_for :view_javascript do
  :plain
    // Test if we can set and read cookies.
    // If we can't, then the browser probably has 3rd party cookies disabled
    // unless the user has first navigated to the domain serving the iframe source.
    var cookieValue = "cookieTest" + new Date().getTime();
    document.cookie = "cookieTest="+cookieValue;
    if (document.cookie.indexOf("cookieTest="+cookieValue) === -1) {
      var cookies_failed = document.getElementById('cookies-failed');
      if (cookies_failed) {
        cookies_failed.style.display = 'block';
        var img = new Image();
        img.src = '/cookies_blocked.gif?question_id=#{@earl.question_id}&session_id=#{@user_session.session_id}&referrer=' + encodeURIComponent(document.referrer);
      }
    }
    else {
      // cleanup test cookie
      document.cookie = 'cookieTest=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }
  $('.rounded').corner('5px');
  -unless session[:has_voted]
    :plain
      $('.firsttime').fadeIn(2000)
      $('.firsttime, #close, .vote_cell').bind("click", function() {
        $(".firsttime").fadeOut(500);
      });
  =render :partial => 'vote_box_js' 
