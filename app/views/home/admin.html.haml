=# render :partial => 'shared/header_vote'
.row
  .span12
    -if @questions_map.length > 0
      %table.table.table-bordered.table-striped.table-condensed{:class => current_user.admin? ? "tablesorter" : ""}
        %thead
          %tr
            %th= "Question"
            %th= t('admin.num_votes')
            %th= t('admin.num_votes_today')
            -if current_user.admin?
              %th= t('admin.user_ideas')
              %th= t('admin.active_user_ideas')
              %th
                Vote Rate
                = link_to('', '#vote-rate', :"data-toggle" => 'modal', :class => 'icon-question-sign')
              %th
                UPR
                = link_to('', '#upload-participation-rate', :"data-toggle" => 'modal', :class => 'icon-question-sign')
              %th
                MRS
                = link_to('', '#median-responses-session', :"data-toggle" => 'modal', :class => 'icon-question-sign')
              %th
                VUC
                = link_to('', '#votes-uploaded-choice', :"data-toggle" => 'modal', :class => 'icon-question-sign')
            %th= t('admin.created')
            %th= "Status"
        %tbody
          -alt=false
          -for earl in @earls
            -q = @questions_map[earl.question_id] or next
            %tr{"data-admin-stats" => current_user.admin? ? admin_stats_question_url(q.id, :format => :json) : nil}
              %td.title= link_to h(truncate(q.attributes['name'], :length => 140, :omission => '…')), url_for(:controller => :questions, :action => :admin, :id => earl.name)
              %td= q.votes_count
              %td= q.recent_votes
              -if current_user.admin?
                %td= q.user_ideas
                %td= q.active_user_ideas
                %td{"data-stats-key" => "vote_rate"}
                  = image_tag('ajax-loader.gif')
                %td{"data-stats-key" => "upload_to_participation_rate"}
                  = image_tag('ajax-loader.gif')
                %td{"data-stats-key" => "median_responses_per_session"}
                  = image_tag('ajax-loader.gif')
                %td{"data-stats-key" => "votes_per_uploaded_choice"}
                  = image_tag('ajax-loader.gif')
              %td= earl.created_at.to_date
              %td
                %button.toggle_question_status.btn{:class => earl.active? ? 'btn-primary' : '', :"data-earl_id" => earl.id}
                  = earl.active? ? 'Activated' : 'Deactivated'
      - if current_user.admin? && !current_page?(admin_path(:all => 'true'))
        .row
          .span12
            %p
              = link_to("See all", admin_path(:all => 'true'), :class => 'btn btn-inverse')
-if current_user.admin?
  -if @blocked_cookies && @blocked_cookies.count > 0
    %h4 Today's Blocked Cookies
    %table.table
      %thead
        %tr
          %th Survey
          %th Count
      %tbody
        - @blocked_cookies.each do |question_id, bc|
          %tr
            %td= "/#{Earl.find_by_question_id(question_id).name}"
            %td= bc.count
  %table.table
    %thead
      %tr
        %th= t('results.data_visualizations') + ' (super-admin only)'
        %th
    %tbody
      %tr
        %td= t('results.world_map_title')
        %td= link_to(t('results.view_link'), url_for(:action => :voter_map, :controller => :questions, :id=> "fakequestion", :type => "all"), :class => "view_voter_map")
      %tr
        %td= t('results.world_map_creators')
        %td= link_to(t('results.view_link'), url_for(:action => :voter_map, :controller => :questions, :id=> "fakequestion", :type => "all_creators"), :class => "view_voter_map")
      -if @available_charts
        -@available_charts.each do |type, options|
          %tr
            %td=options[:title]
            %td= link_to('[View]', url_for(:controller=> :questions, :action => :timeline_graph, :id => "fakequestion", :type => type, :totals => true), :class => 'date-chart')
          %tr{:style => 'display: none;'}
            %td{:colspan => 2}
              .chart-container{:id => "#{type}-chart-container"}

  %table.table
    %thead
      %tr
        %th Download Idea Marketplace Data (super-admin only)
    %tbody
      %tr
        %td List of All Idea Market Places CSV
        %td= link_to('[Download]', :controller => :earls, :action => :export_list)
      %tr
        %td List of all Clicks CSV
        %td= link_to('[Download]', :controller => :clicks, :action => :export)

#explanation{:style => 'display:none;'}
  %h2= t('items.about_scoring')
  =t('items.score_explain')

#vote-rate.hide.modal.fade
  .modal-header
    %button.close{:"data-dismiss" => "modal"}x
    %h2 Vote Rate
  .modal-body
    %p The vote rate is defined as the number of sessions with at least one vote divided by total number of sessions. The range of possible values is from 0 - 1.

#upload-participation-rate.hide.modal.fade
  .modal-header
    %button.close{:"data-dismiss" => "modal"}x
    %h2 Upload to Participation Rate
  .modal-body
    %p This rate is defined as the number of sessions with at least one upload divided by the total number of sessions with some active participation (at least one vote, skip, or uploaded idea). The range of possible values is from 0 - 1.

#median-responses-session.hide.modal.fade
  .modal-header
    %button.close{:"data-dismiss" => "modal"}x
    %h2 Median Responses per Session
  .modal-body
    %p This shows the median number of responses per session. A response can be a vote or a skip. The range of possible values is from 0 - ∞.

#votes-uploaded-choice.hide.modal.fade
  .modal-header
    %button.close{:"data-dismiss" => "modal"}x
    %h2 Votes per Uploaded Choice
  .modal-body
    %p The average number of votes per uploaded choice.

-content_for :head do
  = render :partial => "shared/highcharts_header"
  = javascript_include_tag 'jquery.tablesorter.min.js', 'jquery.blockUI.js'
  :javascript
    var results_view_text = function(){ return "#{t('results.view_link')}";};
    var results_close_text = function(){ return "#{t('results.close_link')}";};

-content_for :view_javascript do
  $('.tablesorter').tablesorter({ headers: { 1 : { sorter: 'digit' } , 2 : { sorter: 'digit' }, 3 : { sorter: 'digit' } , 4 : { sorter: 'digit' } }, sortList: [[2,1]] });
